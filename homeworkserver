#!/usr/bin/env python

import argparse
import collections
import os
import signal
import subprocess
import sys
import urllib

import requests
from requests.exceptions import ConnectionError, ProxyError
import termcolor

from bs4 import BeautifulSoup, SoupStrainer
from datetime import datetime

# Constants
NAME = ""
PASSWORD = ""
PERIOD = ""
STUDENT_ID = ""

BASE_URL = "http://bert.stuy.edu"
SUBMIT = "submit_homework2"
SUBMIT_ASSIGNMENT = "Submit this assignment"
VIEW = "homework_view2"
STORE_HOMEWORK = "store_homework"
URL = ""
PROXIES = {"http": "http://filtr.nycboe.org:8002",
           "https": "http://filtr.nycboe.org:8002"
           }

use_proxy = False


def file_stdin():
    print "Press Ctrl-d when finished"
    file_contents = sys.stdin.read()
    file_name = str(raw_input("What would you like to call this file? "))
    return [file_name, file_contents]


def signal_handler(signal, frame):
    """ Intercept signal and print out a message """
    print error_msg("\nExiting...")
    sys.exit(0)


def success_msg(msg):
    text = termcolor.colored(msg, "green", attrs=["bold"])
    return text


def error_msg(msg):
    text = termcolor.colored(msg, "red", attrs=["bold"])
    return text


def init_settings():
    """ Initializes variables based on settings configuration """
    global NAME, PASSWORD, PERIOD, STUDENT_ID, TEACHER, SEMESTER, URL
    path = os.path.join(os.path.dirname(__file__), "settings.conf")
    config = {}

    execfile(path, config)
    NAME = config["name"]
    PASSWORD = config["password"]
    PERIOD = config["period"]
    STUDENT_ID = config["id"]
    TEACHER = config["teacher"]
    SEMESTER = config["semester"]
    URL = "%s/%s/%s/pages.py" % (BASE_URL, TEACHER, SEMESTER)


def correct_date(date):
    """ Correct date to comply with datetime format strings """
    date = date.split("/")
    if len(date[0]) != 2:  # Fix month by appending 0
        date[0] = "0" + date[0]
    if len(date[1]) != 2:  # Fix day by appending 0
        date[1] = "0" + date[1]
    if len(date[2]) != 10:  # Fix year by appending 20
        date[2] = "20" + date[2]

    # Fix hour by adding 12 if it is PM
    temp = date[2].split(" ")
    hour = temp[1]
    if "p" in hour:
        hour = hour.split(":")
        hour = str(int(hour[0]) + 12) + ":" + hour[1]
    hour = hour[:-1]
    temp[1] = hour
    date[2] = " ".join(temp)

    return "/".join(date)


def is_late(due_date):
    """ Determine if deadline for homework has passed """
    due_date = correct_date(due_date)
    try:
        due_date = datetime.strptime(due_date, "%m/%d/%Y %H")
    except ValueError:
        due_date = datetime.strptime(due_date, "%m/%d/%Y %H:%M")
    now = datetime.now()
    if due_date < now:
        return error_msg("- Expired")
    return ""


def get_page(page, proxy=False):
    """ Returns html of the requested page """
    global use_proxy
    data = {"classes": PERIOD, "students": NAME, "password": PASSWORD, "Submit": "Submit", "page": page}
    try:
        if proxy:
            request = requests.post(URL, data=data, proxies=PROXIES)
            use_proxy = True
        else:
            request = requests.post(URL, data=data)
    except ProxyError:
        print error_msg("Error requesting page. There's an error with the following proxies:")
        print urllib.getproxies()
        sys.exit(1)
    except ConnectionError:
        print error_msg("Error requesting page. Are you connected to the internet?")
        sys.exit(1)

    return request.text


def download_file(url, name=None):
    """ Download file from url """
    if name:
        file_name = name
    else:
        file_name = url.split("/")[-1]  # Retrieve file name from url
    with open(file_name, "wb") as output:
        try:
            if use_proxy:
                response = requests.get(url, stream=True, proxies=PROXIES)
            else:
                response = requests.get(url, stream=True)
        except ProxyError:
            print error_msg("Error downloading file. There's an error with the following proxies:")
            print urllib.getproxies()
            sys.exit(1)
        except ConnectionError:
            print error_msg("Error downloading file. Are you connected to the internet?")
            sys.exit(1)

        if not response.ok:
            print error_msg("Could not fetch file")
            return None

        for block in response.iter_content(1024):
            output.write(block)
    if not url:
        print error_msg("File downloaded as %s" % (file_name))


def parse_homeworks(html):
    """ Returns a list of homeworks that have been submitted with their links and submission time """
    soup = BeautifulSoup(html, "lxml", parse_only=SoupStrainer("table"))

    homeworks = {}
    for table in soup:
        time = table.find("td", attrs={"style": ["color: green;", "color: red;"]})
        comment = table.find("pre")
        try:
            time = time.text.encode("ascii", "ignore")
        except AttributeError:
            time = "Not submitted yet"

        link = table.find("a", attrs={"class": "", "href": True})
        try:
            link = link["href"]
        except TypeError:
            link = None

        label = table.find("label", attrs={"class": ""})
        try:
            label = label.text.encode("ascii", "ignore")
        except AttributeError:
            label = None
        if label is not None:
            if comment is not None:
                homeworks[label] = [link, time, str(comment.contents[0])]
            else:
                homeworks[label] = [link, time, ""]

    homeworks = collections.OrderedDict(sorted(homeworks.items()))  # Sort homeworks in order
    return homeworks


def parse_assignments(html):
    """ Returns a list of homeworks that may be submitted and their due date"""
    soup = BeautifulSoup(html, "lxml")
    titles = []

    # Find all assignment options and get its title
    for option in soup.find_all("option"):
        title = str(option.text)  # Remove unicode
        titles.append(title)

    if len(titles) < 0:
        print error_msg("Could not fetch assignments")
        return None

    i = 0
    assignments = {}
    # Link titles with due date + status
    while i < len(titles):
        split = titles[i].strip(")").split(" (due: ")
        status = ""
        assignment = split[0]
        due_date = split[1]
        status = is_late(due_date)
        assignments[assignment] = "%s %s" % (due_date, status)
        i += 1

    # Sort assignments in order
    assignments = collections.OrderedDict(sorted(assignments.items()))
    return assignments


def view_homework():
    """
    View homeworks from the server

    Will show the contents of the file (if it's readable) before prompting a download
    """
    page = get_page(VIEW)

    if "not found" in page:
        print error_msg("Page not found")
        return None
    elif "Incorrect password" in page:
        print error_msg("Invalid credentials")
        return None
    elif "Cannot find class" in page:
        print error_msg("Invalid period")
        return None
    elif "Access to this site is blocked" in page:  # School proxy :(
        page = get_page(VIEW, True)

    homeworks = parse_homeworks(page)
    if len(homeworks) == 0:
        print error_msg("Could not fetch homeworks")
        return None

    # Print out homework and submission status
    for homework in homeworks.keys():
        status = homeworks[homework][1]
        comment = homeworks[homework][2]
        if "early" in status:
            status = success_msg(status)
        else:
            status = error_msg(status)
        print "[%s]: %s" % (homework, status)
        if comment:
            print "Comment to teacher: %s" % (comment)

    while True:
        option = raw_input("Which homework would you like to view? ")
        if (option not in homeworks.keys()):
            print error_msg("Invalid choice")
            continue
        else:
            break

    link = homeworks[option][0]
    if link is None:
        print error_msg("This homework has not been submitted yet!")
        return None

    url = URL[:-8] + link
    download_file(url, "/tmp/homeworkserver")  # Download file temporarily so we can let the user preview

    file_type = subprocess.check_output("file /tmp/homeworkserver", shell=True)
    # Determine whether or not to preview file based on what the file is
    if ("ASCII text" in file_type):
        subprocess.call("cat /tmp/homeworkserver", shell=True)
    elif ("empty" in file_type):
        print "The file is empty..."
    else:
        print error_msg("Preview not available for non-text files")

    option = str(raw_input("Would you like to download this file? [y/n] "))
    if option.lower() == "y":
        download_file(url)
    os.system("rm /tmp/homeworkserver")  # Remove temporary file
    return None


def submit_homework(homework, stdin=False):
    """ Submit homework to the server """

    # Check if we using stdin
    if stdin:
        pass
    elif not os.path.isfile(homework):
        print error_msg("File does not exist")
        return None

    page = get_page(SUBMIT)

    if "not found" in page:
        print error_msg("Page not found")
        return None
    elif "Incorrect password" in page:
        print error_msg("Invalid credentials")
        return None
    elif "Cannot find class" in page:
        print error_msg("Invalid period")
        return None
    elif "Access to this site is blocked" in page:  # School proxy :(
        page = get_page(SUBMIT, True)

    assignments = parse_assignments(page)

    # Print assignment and due date
    for assignment in assignments:
        due_date = assignments[assignment]
        print "[%s] %s" % (assignment, due_date)

    while True:
        option = str(raw_input("Please select a homework to submit: "))
        if (option not in assignments.keys()):
            print error_msg("Invalid choice")
            continue
        else:
            # Protect against users accidentally submitting to an old server slot
            if "Expired" in assignments[option]:
                print error_msg("You are about to submit a file past its due date. Are you sure you want to continue? [y/n]"),
                response = raw_input()
                if response.lower() == "y":
                    break
                else:
                    sys.exit(0)
            else:
                break

    comment = ""
    answer = str(raw_input("Would you like to write a comment to the teacher? [y/n] "))
    if answer.lower() == "y":
        comment = str(raw_input("Please enter your comment: "))

    data = {"page": STORE_HOMEWORK, "id4": STUDENT_ID, "classid": PERIOD,
            "assignmentid": str(option), "teacher_comment": comment, "submit": SUBMIT_ASSIGNMENT}

    # If we are taking the file in from stdin, set the file_name and contents accordingly
    if stdin:
        file_name = homework[0]
        file_contents = homework[1]
    else:
        file_name = homework
        file_contents = open(homework, "r")

    try:
        if use_proxy:
            request = requests.post(URL, data=data, proxies=PROXIES, files={"filecontents": (file_name, file_contents)})
        else:
            request = requests.post(URL, data=data, files={"filecontents": (file_name, file_contents)})
    except ProxyError:
        print error_msg("Error posting file. There's an error with the following proxies:")
        print urllib.getproxies()
        sys.exit(1)
    except ConnectionError:
        print error_msg("Error posting file. Are you connected to the internet?")
        sys.exit(1)

    if request.status_code == 200:
        print success_msg("Homework successfully submitted")
    else:
        print error_msg("Failed to submit file")


def update_credentials():
    # Get actual settings file from where the script is located
    path = os.path.join(os.path.dirname(__file__), "settings.conf")
    f = open(path, "r")
    settings = f.readlines()
    while True:
        print "================================================================="
        print "Current config:"
        print "".join(settings)
        print "1)  Update username"
        print "2)  Update password"
        print "3)  Update period"
        print "4)  Update id"
        print "5)  Update teacher"
        print "6)  Update semester"
        print "7)  Done"
        option = str(raw_input("\nWhat would you like to do? "))
        if option == "1":
            name = str(raw_input("Please enter your new username: (ID;last, first) "))
            settings[0] = "name = \"%s\"\n" % (name)
        elif option == "2":
            password = str(raw_input("Please enter your new password: "))
            settings[1] = "password = \"%s\"\n" % (password)
        elif option == "3":
            period = str(raw_input("Please enter your new period: (p<1-10>) "))
            settings[2] = "period = \"%s\"\n" % (period)
        elif option == "4":
            sid = str(raw_input("Please enter your new Id: (####) "))
            settings[3] = "id = \"%s\"\n" % (sid)
        elif option == "5":
            teacher = str(raw_input("Please enter the name of your new teacher: (first[0]+last) "))
            settings[4] = "teacher = \"%s\"\n" % (teacher)
        elif option == "6":
            semester = str(raw_input("Please enter your new semester: (<fall/spring>+year)"))
            settings[5] = "semester = \"%s\"" % (semester)
        elif option == "7":
            f.close()
            f = open(path, "w")
            f.write("".join(settings))
            f.close()
            success_msg("Successfully updated settings")
            sys.exit(0)


def main():
    signal.signal(signal.SIGINT, signal_handler)
    init_settings()
    parser = argparse.ArgumentParser(
        prog='homeworkserver', formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=30)
        )
    parser.add_argument(
        "-s",
        "--submit",
        nargs=1,
        metavar=("FILE"),
        help="submit homework"
        )
    parser.add_argument(
        "-v",
        "--view",
        help="view homework",
        action="store_true"
        )
    parser.add_argument(
        "-u",
        "--update-settings",
        help="update settings file",
        action="store_true"
        )
    parser.add_argument(
        "--stdin",
        help="submit file from stdin",
        action="store_true"
        )
    args = parser.parse_args()
    if args.view:
        view_homework()
    elif args.submit:
        submit_homework(args.submit[0])
    elif args.update_settings:
        update_credentials()
    elif args.stdin:
        result = file_stdin()
        submit_homework(result, True)
    else:
        parser.parse_args(["-h"])

if __name__ == "__main__":
    main()
